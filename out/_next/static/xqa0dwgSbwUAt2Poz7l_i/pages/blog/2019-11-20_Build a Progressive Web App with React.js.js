(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{mJVT:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/2019-11-20_Build a Progressive Web App with React.js",function(){return a("yPEy")}])},yPEy:function(e,t,a){"use strict";a.r(t),a.d(t,"default",(function(){return m}));var n=a("wx14"),r=a("Ff2n"),b=a("q1tI"),o=a.n(b),i=a("7ljp"),c=a("BIUn"),p=a("hZ7m"),l=(a("NO8M"),o.a.createElement,{title:"Build a Progressive Web App with React.js",__filename:"2019-11-20_Build a Progressive Web App with React.js.md",__url:"pages/blog/2019-11-20_Build a Progressive Web App with React.js.md",date:"2019-11-20",layout:"bloglayout",description:"A reference guide on how to remove unused CSS selectors, Minify CSS files to reduce your website's loading time.",imageUrl:"/images/blog/react-pwa/thumbnail.png",tags:["pwa","react","javascript"]}),s={},u=function(e){var t=e.children;return Object(c.a)(Object.assign({},l,{children:t}))};function m(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)(u,Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/blog/react-pwa/thumbnail.png",alt:"Progressive web app with react.js"}))),Object(i.b)("p",null,"A guide on creating or converting your react application into a progressive web app."),Object(i.b)("br",null),Object(i.b)("h2",null,"What is a Progressive Web Application (PWA)"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("em",{parentName:"p"},"A progressive web app (PWA) is the set of mobile web application development techniques that entails building apps that feel and look like native ones.")," Using a web stack (JS, HTML, and CSS), progressive web apps combine a rich functionality and smooth user experience associated with native apps. Simply put, PWA is the web app with the native-app flavor: After the installation, a user clicks on its icon on a device home screen and gets straight to the website.")),Object(i.b)("br",null),Object(i.b)("p",null,"Progressive web apps provides huge benefits like:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Self-updates:")," Able to update themselves automatically, apps stay fresh.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Cross platform compatibility:")," These apps are built according to progressive enhancement principles. Progressive enhancement is the web design strategy of providing the basic functionality and content to everyone regardless of browsers they use or connection quality while delivering more sophisticated page versions to users whose newer browsers can support them.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"App-like experience:")," It provides the feels and looks of a native mobile application.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Offline Support:")," Your application can work offline except the page requires a real time data fetching."))),Object(i.b)("p",null,Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://web.dev/progressive-web-apps"}),"Learn more about progressive web apps")),Object(i.b)("h2",null,"Service Workers"),Object(i.b)("p",null,"A service worker is a specific type of JavaScript worker, which is a script that runs in the ",Object(i.b)("em",{parentName:"p"},"background of the user\u2019s browser"),".\nThat way we are able to do allot of things in the ",Object(i.b)("em",{parentName:"p"},"background")," like caching static contents of our website(Images, Css files, Html files, Videos, JS files ...) etc.\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.keycdn.com/blog/service-workers#keeping-service-workers-up-to-date"}),"Learn more about ",Object(i.b)("strong",{parentName:"a"},"service workers")),"."),Object(i.b)("br",null),Object(i.b)("h2",null,"\ud83d\ude80 Lets get started \ud83d\udd25"),Object(i.b)("br",null),Object(i.b)("p",null,"Since we are going to use React we need to initialize our project with ",Object(i.b)("em",{parentName:"p"},"create-react-app cli tool"),"."),Object(i.b)(p.a,{lang:"bash",mdxType:"CodeWrapper"}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"yarn create react-app react-pwa\n            # OR\nnpx create-react-app react-pwa\n")),Object(i.b)("p",null,"Next we will change directory into our working project folder by running ",Object(i.b)("inlineCode",{parentName:"p"},"cd react-pwa")," in the terminal and I'm going to open the project on ",Object(i.b)("em",{parentName:"p"},"VS Code")," using the ",Object(i.b)("inlineCode",{parentName:"p"},"code .")," command."),Object(i.b)("br",null),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/blog/react-pwa/init-app.png/",alt:"Initialized Project"}))),Object(i.b)("br",null),Object(i.b)("p",null,"As you can see there's a bunch of files and folders that ",Object(i.b)("em",{parentName:"p"},"create-react-app")," comes with but i am not going to go through everything in this tutorial."),Object(i.b)("br",null),Object(i.b)("p",null,"There is an important file called ",Object(i.b)("em",{parentName:"p"},"manifest.json")," in the ",Object(i.b)("em",{parentName:"p"},"/public")," directory which contains information(metadata) that defines your applications appearance in different devices."),Object(i.b)("br",null),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/blog/react-pwa/manifest.png",alt:"Manifest Project"}))),Object(i.b)("br",null),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"short_name"),": The name of your app when added to your home screen.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"name"),": The name that the browser uses to prompt users to add your app to their home scree.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"icons"),": Specifies icons that will be displayed in different devices including the web browser.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"start_url"),": The base path of your app when initialized.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"display"),": Here you can customize the browser view. Other options are ",Object(i.b)("em",{parentName:"p"},'"fullscreen","standalone","minimal-ui","browser"'))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"theme_color"),": The color of the browser toolbar")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"background_color"),": The color of the splash screen that shows when the app is launched by clicking on its icon in the Home screen."))),Object(i.b)("p",null,"In the public/index.html"),Object(i.b)(p.a,{lang:"public/index.html",mdxType:"CodeWrapper"}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'<link rel="manifest" href="%PUBLIC_URL%/manifest.json" />\n')),Object(i.b)("p",null,"Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the public folder during the build. Only files inside the public folder can be referenced from the HTML."),Object(i.b)("p",null,"Lets play around with this app by adding some piece of code in our ",Object(i.b)("em",{parentName:"p"},"src/App.js")," file."),Object(i.b)(p.a,{lang:"src/App.js",mdxType:"CodeWrapper"}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import React from "react";\nimport logo from "./logo.svg";\nimport "./App.css";\n\nfunction App() {\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <div className="App">\n      <header className="App-header">\n        <img src={logo} className="App-logo" alt="logo" />\n        <h1>{value}</h1>\n        <button style={{ padding: 12, backgroundColor: "#61dafb", border: "none" }} onClick={() => setValue(value + 1)}>\n          Add 1\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n')),Object(i.b)("p",null,"Next we are going to build our app by running"),Object(i.b)(p.a,{lang:"bash",mdxType:"CodeWrapper"}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm run build\n    #OR\nyarn build\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: we are able to use this command because its present in our ",Object(i.b)("em",{parentName:"p"},"package.json")," file.")),Object(i.b)("p",null,"The build script generates some files and stores it in a ",Object(i.b)("em",{parentName:"p"},"build")," directory."),Object(i.b)("br",null),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/blog/react-pwa/build.png",alt:"Manifest Project"}))),Object(i.b)("br",null),Object(i.b)("p",null,"The static folder holds all the js and css files. The ",Object(i.b)("em",{parentName:"p"},"index.html")," is our main page that loads all our React files stored in the ",Object(i.b)("em",{parentName:"p"},"static/js")," folder and also our CSS that is stored in the ",Object(i.b)("em",{parentName:"p"},"static/css")," folder. We can the ",Object(i.b)("em",{parentName:"p"},"service-worker.js")," file, that\u2019s where all service worker code is stored. The ",Object(i.b)("em",{parentName:"p"},"precache-manifest.","*",".js")," file holds all the files the service worker caches in an array. We see the manifest.json file, as we already know it tells the browser how our ",Object(i.b)("em",{parentName:"p"},"PWA")," will behave."),Object(i.b)("p",null,"We need to install a http-server to be able to run our app in the browser so i'm going to install live-server by running:"),Object(i.b)(p.a,{lang:"bash",mdxType:"CodeWrapper"}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install --global live-server\n")),Object(i.b)("p",null,"After installing ",Object(i.b)("em",{parentName:"p"},"live-server")," we can add a script in our package.json to start our server."),Object(i.b)(p.a,{lang:"package.json",mdxType:"CodeWrapper"}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"scripts": {\n    ...\n    "serve": "live-server ./build"\n}\n\n')),Object(i.b)("p",null,"Now run ",Object(i.b)("inlineCode",{parentName:"p"},"npm run serve")," in your terminal and navigate to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://localhost:8080/?target=_blank"}),"http://localhost:8080/")," in your browser."),Object(i.b)("br",null),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/blog/react-pwa/build-serve.png",alt:"Manifest Project"}))),Object(i.b)("br",null),Object(i.b)("h3",null,"\ud83d\ude0e Our app is live."),Object(i.b)("p",null,"\ud83d\udca9 However, If our server goes down at this point our application is going to fail because its not ",Object(i.b)("em",{parentName:"p"},"PWA"),". There are many tools for testing ",Object(i.b)("em",{parentName:"p"},"PWA")," but we are going to use the built in tool that comes with Google Chrome."),Object(i.b)("br",null),Object(i.b)("p",null,"If you press ",Object(i.b)("inlineCode",{parentName:"p"},"F12")," on your keyboard to open the chrome dev tools and navigate to the application tab you can see that the ",Object(i.b)("em",{parentName:"p"},"service-worker.js")," file is missing and that is because we didn't register it in our application before build"),Object(i.b)("p",null,"To register it we just need to make one little change in our ",Object(i.b)("em",{parentName:"p"},"src/index.js"),"."),Object(i.b)(p.a,{lang:"src/index.js",mdxType:"CodeWrapper"}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),'import React from "react";\nimport ReactDOM from "react-dom";\nimport "./index.css";\nimport App from "./App";\nimport * as serviceWorker from "./serviceWorker";\n\nReactDOM.render(<App />, document.getElementById("root"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: we changed ",Object(i.b)("em",{parentName:"p"},Object(i.b)("del",{parentName:"em"},"serviceWorker.unregister()"))," to serviceWorker.register(). These are built in functions that comes with CRA.")),Object(i.b)("p",null,"Next we will build and serve our project by running"),Object(i.b)(p.a,{lang:"bash",mdxType:"CodeWrapper"}),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm run build && npm run serve\n")),Object(i.b)("p",null,"and when you reload your browser you can see the ",Object(i.b)("em",{parentName:"p"},"service-worker.js")," file in the application tab of your console."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Also note that the browser cached our static files in the CacheStorage")),Object(i.b)("br",null),Object(i.b)("p",null,Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/blog/react-pwa/service-worker.png",alt:"service-worker.js"})),Object(i.b)("img",Object(n.a)({parentName:"p"},{src:"/images/blog/react-pwa/cache.png",alt:"Cached files"}))),Object(i.b)("br",null),Object(i.b)("p",null,"To test if our application is now a PWA we shutdown our server by holding ",Object(i.b)("inlineCode",{parentName:"p"},"ctrl + c")," in the terminal then Refresh the browser and everything still works the same way and no errors even though our server is down."))}m.isMDXComponent=!0}},[["mJVT",0,2,1,3,4,5]]]);