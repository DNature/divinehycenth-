(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{DBtL:function(e,t,n){n.r(t),n.d(t,"default",(function(){return u}));var a=n("wx14"),r=n("Ff2n"),o=n("q1tI"),c=n.n(o),p=n("7ljp"),l=n("BIUn"),b=(n("NO8M"),n("hZ7m"),c.a.createElement,{title:"Setup Yarn workspaces with typescript.",__filename:"2020-01-02_yarn-workspace-monorepo.md",__url:"pages/blog/2020-01-02_yarn-workspace-monorepo.md",date:"2020-01-02",layout:"bloglayout",description:"A complete guide on how to setup Yarn workspace for React web, and React-Native(expo) with Typescript.",imageUrl:"/images/blog/yarn-workspace/thumbnail.png",tags:["yarn","workspace","typescript"]}),s={},i=e=>{var{children:t}=e;return Object(l.a)(Object.assign({},b,{children:t}))};function u(e){var{components:t}=e,n=Object(r.a)(e,["components"]);return Object(p.b)(i,Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(p.b)("p",null,Object(p.b)("img",Object(a.a)({parentName:"p"},{src:"/images/blog/yarn-workspace/thumbnail.png",alt:"How to setup yarn workspaces"}))),Object(p.b)("h2",null,"How to setup Yarn workspace for React web, and React-Native(expo) with Typescript"),Object(p.b)("br",null),Object(p.b)("h3",null,"Prerequisites"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"You must have ",Object(p.b)("strong",{parentName:"p"},"Typescript")," installed on your system and some basic knowledge of it.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Basic knowledge of ",Object(p.b)("strong",{parentName:"p"},"React")," and ",Object(p.b)("strong",{parentName:"p"},"React Native")))),Object(p.b)("p",null,"Recently i started working on a Full stack Airbnb clone project from ",Object(p.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.youtube.com/watch?v=kuswGIH-Xj8&list=PLN3n1USn4xlnfJIQBa6bBjjiECnk6zL6s"}),"@benawad on Youtube")," that consists of a ",Object(p.b)("em",{parentName:"p"},"Nodejs + Graphql server"),", ",Object(p.b)("em",{parentName:"p"},"React"),", and ",Object(p.b)("em",{parentName:"p"},"React Native")," but i couldn't get it to work because of the resent changes in package versions."),Object(p.b)("br",null),Object(p.b)("h2",null,Object(p.b)("a",Object(a.a)({parentName:"h2"},{href:"https://classic.yarnpkg.com/en/docs/workspaces/#toc-why-would-you-want-to-do-this"}),"Workspaces")),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},Object(p.b)("em",{parentName:"p"},"Workspaces are a new way to setup your package architecture that\u2019s available by default starting from Yarn 1.0. It allows you to setup multiple packages in such a way that you only need to run yarn install once to install all of them in a single pass"),"."),Object(p.b)("p",{parentName:"blockquote"},"Your dependencies can be linked together, which means that your workspaces can depend on one another while always using the most up-to-date code available. This is also a better mechanism than yarn link since it only affects your workspace tree rather than your whole system.")),Object(p.b)("br",null),Object(p.b)("h2",null,"Our repo structure"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("strong",{parentName:"p"},"Yarn")," handles the dependencies.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"One folder per package inside packages directory.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"All packages share the same structure.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Each package defines only its runtime dependencies.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"All the tooling, dependencies and devDependencies are shared and live in its own package.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Each package contains the required configuration files for the tooling. Each file extends a common base configuration (we use Babel, Jest and ESlint + Prettier to compile, test and lint/prettify the code).")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Each package symlinks a common task script that defines how the different tools must be invoked.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"There is a \u201chub\u201d package. It depends on all the other packages and allows easy usage of the framework (a single awesome dependency).")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"All packages share the version number.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Publication is handled by a custom publish script that will be used by the CI environment."))),Object(p.b)("p",null,"Let\u2019s see each part in greater detail."),Object(p.b)("br",null),Object(p.b)("h2",null,"Monorepo base: Yarn"),Object(p.b)("p",null,"The base ",Object(p.b)("strong",{parentName:"p"},"package.json")," file looks like:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "private": true,\n  "workspaces": ["packages/*"],\n  "name": "expo-yarn-workspace-demo"\n}\n')),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("strong",{parentName:"p"},"workspaces")," an array of directories")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"The build script tells lerna to run all the build commands in our ",Object(p.b)("strong",{parentName:"p"},"/packages")," directory."))),Object(p.b)("br",null),Object(p.b)("h2",null,Object(p.b)("a",Object(a.a)({parentName:"h2"},{href:"https://docs.expo.io/versions/latest/guides/typescript/"}),"Expo with Typescript")),Object(p.b)("p",null,"We will initialize our ",Object(p.b)("strong",{parentName:"p"},"EXPO")," by running the following commands."),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Install the command line tools\nnpm install --global expo-cli\ncd packages\nexpo init app\n")),Object(p.b)("p",null,"Use your arrow key to select ",Object(p.b)("strong",{parentName:"p"},"blank (Typescript)")," for a typescript project and complete the steps you're prompted with."),Object(p.b)("br",null),Object(p.b)("p",null,Object(p.b)("img",Object(a.a)({parentName:"p"},{src:"/images/blog/yarn-workspace/expo-init.png",alt:"expo init app"}))),Object(p.b)("br",null),Object(p.b)("p",null,"If you follow the above steps correctly its going to create an ",Object(p.b)("strong",{parentName:"p"},"/packages/app")," folder in the packages directory and install all the necessary dependencies."),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"If you run into issues while generating your ",Object(p.b)("strong",{parentName:"p"},"expo")," boilerplate then try to generate it in a folder and move it into your ",Object(p.b)("strong",{parentName:"p"},"/packages")," folder.")),Object(p.b)("br",null),Object(p.b)("h2",null,Object(p.b)("a",Object(a.a)({parentName:"h2"},{href:"https://create-react-app.dev/docs/adding-typescript/#installation"}),"React with Typescript")),Object(p.b)("p",null,"Now we are going to generate our React-typescript boilerplate by running the following commands:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn create react-app web --template typescript\n")),Object(p.b)("p",null,"The above command will generate a typescript boilerplate of react and install all the necessary dependencies."),Object(p.b)("p",null,"If you startup your expo project by running ",Object(p.b)("inlineCode",{parentName:"p"},"yarn start")," your app is going to crash because yarn is ",Object(p.b)("strong",{parentName:"p"},"hoisting")," some expo packages which we can prevent by telling yarn not to do so. ",Object(p.b)("a",Object(a.a)({parentName:"p"},{href:"https://classic.yarnpkg.com/blog/2018/02/15/nohoist/"}),"Read more about yarn workspace hoisting"),"."),Object(p.b)("p",null,"Add the following piece of code in the root ",Object(p.b)("strong",{parentName:"p"},"package.json")," file."),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:"{2,5}","{2,5}":!0}),'// package.json\n{\n  "private": true,\n  "workspaces": ["packages/*"],\n  "name": "expo-yarn-workspace-demo",\n  "scripts": {\n    "build": "lerna run build"\n  },\n  "devDependencies": {\n    "lerna": "^3.20.2"\n  },\n  "nohoist": ["**/react-native", "**/react-native/**", "**/expo", "**/expo/**", "**/@babel/core", "**/@babel/core/**"]\n}\n')),Object(p.b)("br",null),Object(p.b)("p",null,"The root ",Object(p.b)("strong",{parentName:"p"},"tsconfig.json")," should look like:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "target": "es6",\n    "module": "commonjs",\n    "lib": ["dom", "ES2015", "dom.iterable", "ES6", "ES2017", "ESNext.AsyncIterable", "ESNext"],\n    "sourceMap": true,\n    "removeComments": true,\n    "strict": true,\n    "noImplicitAny": true,\n    "strictNullChecks": true,\n    "strictFunctionTypes": true,\n    "noImplicitThis": true,\n    "alwaysStrict": true,\n    "noUnusedLocals": true,\n    "noUnusedParameters": true,\n    "noImplicitReturns": true,\n    "noFallthroughCasesInSwitch": true,\n    "esModuleInterop": true,\n    "forceConsistentCasingInFileNames": true\n  }\n}\n')),Object(p.b)("br",null),Object(p.b)("p",null,"Your ",Object(p.b)("strong",{parentName:"p"},"packages/web/tsconfig.json")," file should look like:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "extends": "../../tsconfig.json",\n  "compilerOptions": {\n    "allowJs": true,\n    "skipLibCheck": true,\n    "esModuleInterop": true,\n    "allowSyntheticDefaultImports": true,\n    "strict": true,\n    "forceConsistentCasingInFileNames": true,\n    "module": "esnext",\n    "moduleResolution": "node",\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "noEmit": true,\n    "jsx": "react"\n  },\n  "include": ["src"]\n}\n')),Object(p.b)("br",null),Object(p.b)("p",null,"Your ",Object(p.b)("strong",{parentName:"p"},"packages/app/tsconfig.json")," file should look like:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "allowSyntheticDefaultImports": true,\n    "jsx": "react-native",\n    "lib": ["dom", "esnext"],\n    "moduleResolution": "node",\n    "noEmit": true,\n    "skipLibCheck": true,\n    "resolveJsonModule": true\n  }\n}\n')),Object(p.b)("br",null),Object(p.b)("p",null,"Next thing is to configure babel in our ",Object(p.b)("strong",{parentName:"p"},"packages/app")," folder."),Object(p.b)("p",null,"create a file in your ",Object(p.b)("strong",{parentName:"p"},"packages/app")," and call it ",Object(p.b)("inlineCode",{parentName:"p"},"babel.config.js")," and add the following piece of code:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// babel.config.js\nmodule.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: ["babel-preset-expo"],\n  };\n};\n')),Object(p.b)("p",null,"The ",Object(p.b)("strong",{parentName:"p"},"babel-preset-expo")," plugin extends the default React Native preset (metro-react-native-babel-preset) and adds support for decorators, tree-shaking web packages, and loading font icons with optional native dependencies if they're installed."),Object(p.b)("p",null,"Create a ",Object(p.b)("strong",{parentName:"p"},"metro.config.js")," file in your ",Object(p.b)("strong",{parentName:"p"},"packages/app")," directory and paste the following configuration:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const { createMetroConfiguration } = require("expo-yarn-workspaces");\nmodule.exports = createMetroConfiguration(__dirname);\n')),Object(p.b)("br",null),Object(p.b)("p",null,"\u{1f680} Now you can run ",Object(p.b)("inlineCode",{parentName:"p"},"yarn start")," in your packages/app folder or packages/web and everything will work fine."),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},"One great thing about ",Object(p.b)("em",{parentName:"li"},"yarn workspaces")," is we can create a local package and share it across our ",Object(p.b)("strong",{parentName:"li"},"web, app")," or even a custom folder (server)")),Object(p.b)("p",null,"Let me show you how it works with ",Object(p.b)("strong",{parentName:"p"},"Typescript"),"."),Object(p.b)("p",null,"Create a folder in your ",Object(p.b)("strong",{parentName:"p"},"packages")," directory and call it ",Object(p.b)("strong",{parentName:"p"},"common")," then create a ",Object(p.b)("strong",{parentName:"p"},"package.json")," file with the default setup by running:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm init -y\n")),Object(p.b)("p",null,"your ",Object(p.b)("strong",{parentName:"p"},"packages/common/package.json")," file should look like:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "@expoYarn/common",\n  "version": "1.0.0",\n  "description": "",\n  "main": "dist/index.js",\n  "typings": "dist/index.d.ts",\n  "devDependencies": {\n    "@types/node": "^10.3.2",\n    "typescript": "^2.9.1"\n  },\n  "scripts": {\n    "build": "tsc",\n    "build:watch": "tsc --watch"\n  },\n  "keywords": [],\n  "author": "",\n  "license": "ISC"\n}\n')),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"Note the ",Object(p.b)("strong",{parentName:"p"},"name")," property is set to ",Object(p.b)("strong",{parentName:"p"},"@expoYarn/common")," where ",Object(p.b)("strong",{parentName:"p"},"common")," is the name of this current package.")),Object(p.b)("p",null,"Next create in the ",Object(p.b)("strong",{parentName:"p"},"common")," directory and call it ",Object(p.b)("strong",{parentName:"p"},"src/")),Object(p.b)("br",null),Object(p.b)("p",null,"We are going to add a simple code snippet that is going to be accessible across our application."),Object(p.b)("p",null,"Create a file in the ",Object(p.b)("strong",{parentName:"p"},"src")," directory, call it ",Object(p.b)("strong",{parentName:"p"},"index.ts")," then paste the following code that accepts two parameters which are numbers and returns a sum of the two numbers:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export const add = (a: number, b: number): number => a + b;\n")),Object(p.b)("p",null,"We are going to build our project by running ",Object(p.b)("inlineCode",{parentName:"p"},"tsc")," in our common directory to build our code into a dist folder."),Object(p.b)("br",null),Object(p.b)("p",null,"To be able to access this module in our ",Object(p.b)("strong",{parentName:"p"},"web")," directory we are going to add it manually to our our ",Object(p.b)("strong",{parentName:"p"},"package.json")," int the ",Object(p.b)("strong",{parentName:"p"},"web")," directory:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  ...\n  "dependencies": {\n    ...\n    "@expoYarn/common": "1.0.0"\n  }\n}\n')),Object(p.b)("p",null,"run ",Object(p.b)("inlineCode",{parentName:"p"},"yarn install")," to link the newly added package then we will test it out by using it in our ",Object(p.b)("strong",{parentName:"p"},"App.tsx")," to log the sum of two numbers. Your ",Object(p.b)("strong",{parentName:"p"},"App.tsx")," should look like:"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import React from "react";\nimport logo from "./logo.svg";\nimport { add } from "@expoYarn/common";\nimport "./App.css";\n\nconst App = () => {\n  // Testing out our add function\n  const result = add(10, 20);\n  console.log(result); // => Returns [30]\n\n  return (\n    <div className="App">\n      <header className="App-header">\n        <img src={logo} className="App-logo" alt="logo" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a className="App-link" href="https://reactjs.org" target="_blank" rel="noopener noreferrer">\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n')),Object(p.b)("p",null,"You can now see how handy ",Object(p.b)("strong",{parentName:"p"},"yarn workspaces")," can be because it saves allot of code which means we are following the ",Object(p.b)("strong",{parentName:"p"},"Don't Repeat Your Self (DRY)")," principle of ",Object(p.b)("strong",{parentName:"p"},"Object Oriented Programming (OOP)")," although there was allot of setup but ",Object(p.b)("strong",{parentName:"p"},Object(p.b)("em",{parentName:"strong"},"No Pain No Gain")),"."),Object(p.b)("h3",null,"[# Complete Code https:/"))}u.isMDXComponent=!0},Emx2:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/2020-01-02_yarn-workspace-monorepo",function(){return n("DBtL")}])}},[["Emx2",0,2,1,3,4,5]]]);